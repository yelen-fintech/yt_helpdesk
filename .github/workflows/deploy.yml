name: Build & Deploy ImapApiClient
on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Vérification du dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Installation des dépendances système nécessaires
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf build-essential \
            libssl-dev libncurses-dev libwxgtk3.2-dev \
            libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev \
            unixodbc-dev xsltproc fop libxml2-utils libncurses5-dev \
            git curl libexpat1-dev zlib1g-dev

      # Étape 3 : Installation de l'environnement Elixir/OTP
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18'
          otp-version: '26'

      # Étape 4 : Installation des dépendances Elixir
      - name: Install dependencies
        run: mix deps.get

      # Étape 5 : Exécution des tests
      - name: Run tests
        run: mix test

      # Étape 6 : Compilation du projet
      - name: Compile project
        run: mix compile

      # Étape 7 : Création de la release
      - name: Build release
        run: MIX_ENV=prod mix release

      # Étape 8 : Vérification que la release a été créée
      - name: Verify release
        run: |
          if [ -d "_build/prod/rel/imap_api_client" ]; then
            echo "Release created successfully"
            ls -la _build/prod/rel/imap_api_client
          else
            echo "Release directory not found!"
            exit 1
          fi

      # Étape 9 : Préparation et arrêt de l'application sur le serveur distant (si nécessaire)
      - name: Prepare deployment environment
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Création du répertoire de déploiement s'il n'existe pas
            mkdir -p ~/yt_helpdesk/_build/prod/rel
            
            # Vérification si l'application est en cours d'exécution
            if pgrep -f "imap_api_client.*beam" > /dev/null; then
              echo "Application is running, attempting to stop gracefully..."
              
              # Capture du PID pour référence
              APP_PIDS=$(pgrep -f "imap_api_client.*beam")
              echo "Found running processes: $APP_PIDS"
              
              # Essai des méthodes d'arrêt du plus doux au plus brutal
              if [ -f ~/yt_helpdesk/_build/prod/rel/imap_api_client/bin/imap_api_client ]; then
                # Méthode 1: Avec --pipe (souvent plus fiable)
                echo "Trying pipe method..."
                cd ~/yt_helpdesk
                ~/yt_helpdesk/_build/prod/rel/imap_api_client/bin/imap_api_client stop --pipe || true
                sleep 3
                
                # Méthode 2: Commande d'arrêt standard (si nécessaire)
                if pgrep -f "imap_api_client.*beam" > /dev/null; then
                  echo "Trying standard stop command..."
                  ~/yt_helpdesk/_build/prod/rel/imap_api_client/bin/imap_api_client stop || true
                  sleep 3
                fi
                
                # Méthode 3: SIGTERM (si toujours nécessaire)
                if pgrep -f "imap_api_client.*beam" > /dev/null; then
                  echo "Sending SIGTERM to application process..."
                  pkill -TERM -f "imap_api_client.*beam" || true
                  sleep 5
                fi
              else
                # Si le binaire n'est pas trouvé mais des processus existent
                echo "Binary not found but processes exist, sending SIGTERM..."
                pkill -TERM -f "imap_api_client.*beam" || true
                sleep 5
              fi
              
              # Dernier recours: SIGKILL
              if pgrep -f "imap_api_client.*beam" > /dev/null; then
                echo "Force killing lingering processes as last resort..."
                pkill -9 -f "imap_api_client.*beam"
                sleep 2
              fi
              
              # Vérification finale
              if pgrep -f "imap_api_client.*beam" > /dev/null; then
                echo "WARNING: Could not stop all processes. Proceeding anyway."
              else
                echo "All processes stopped successfully."
              fi
            else
              echo "No running application detected, proceeding with deployment."
            fi
            
            # Sauvegarde de l'ancienne version avec un timestamp si elle existe
            if [ -d ~/yt_helpdesk/_build/prod/rel/imap_api_client ]; then
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              echo "Backing up current release..."
              mv ~/yt_helpdesk/_build/prod/rel/imap_api_client ~/yt_helpdesk/_build/prod/rel/imap_api_client_backup_$TIMESTAMP
            fi
            
            echo "Deployment directory prepared"

      # Étape 10 : Copie de la release sur le serveur distant
      - name: Copy release to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "_build/prod/rel/imap_api_client"
          target: "~/yt_helpdesk/_build/prod/rel"
          strip_components: 3
          overwrite: true
          debug: true

      # Étape 11 : Démarrage de l'application
      - name: Start application and verify
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting application in daemon mode..."
            cd ~/yt_helpdesk
            
            if [ -f ./_build/prod/rel/imap_api_client/bin/imap_api_client ]; then
              # Vérification des permissions
              chmod +x ./_build/prod/rel/imap_api_client/bin/imap_api_client
              
              # Vérifier que l'application n'est pas déjà en cours d'exécution
              if pgrep -f "imap_api_client.*beam" > /dev/null; then
                echo "WARNING: Application processes already running. Proceeding anyway."
              fi
              
              # Démarrage simple avec le mode daemon
              echo "Starting application with daemon command..."
              ./_build/prod/rel/imap_api_client/bin/imap_api_client daemon
              
              # Attente et vérification
              echo "Waiting for application to start..."
              sleep 10
              
              # Vérification que le processus est en cours d'exécution
              if pgrep -f "imap_api_client.*beam" > /dev/null; then
                echo "Application started successfully as a daemon"
                echo "Running processes:"
                ps aux | grep "[i]map_api_client" || echo "Process listing failed"
              else
                echo "Error: Application process not found after start!"
                echo "Checking logs for startup issues:"
                find ./_build/prod/rel/imap_api_client/releases -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -n 50 {} \;
                exit 1
              fi
            else
              echo "Error: Application binary not found!"
              exit 1
            fi
            
            echo "Deployment completed successfully"
